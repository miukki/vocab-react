// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`forgotPassword checkMobile allow action when mobile OK 1`] = `
Array [
  Object {
    "type": "auth/forgotPassword/SUBMIT",
  },
  Object {
    "type": "auth/forgotPassword/SUBMIT_DONE",
  },
  Object {
    "payload": Object {
      "jwt": "jwt-token",
    },
    "type": "auth/token/SET_JWT",
  },
  Object {
    "routeName": "Tab",
    "type": "Navigation/NAVIGATE",
  },
]
`;

exports[`forgotPassword checkMobile reject action when mobile length wrong when SEND_VCODE 1`] = `
Array [
  Object {
    "payload": Object {
      "errorTypes": Array [
        Object {
          "errorType": "wrongMobile",
        },
      ],
    },
    "type": "auth/forgotPassword/SHOW_ERROR",
  },
]
`;

exports[`forgotPassword checkMobile reject action when mobile length wrong when SUBMIT 1`] = `
Array [
  Object {
    "payload": Object {
      "errorTypes": Array [
        Object {
          "errorType": "wrongVcode",
        },
        Object {
          "errorType": "wrongMobile",
        },
        Object {
          "errorType": "weakPassword",
        },
      ],
    },
    "type": "auth/forgotPassword/SHOW_ERROR",
  },
]
`;

exports[`forgotPassword resetPassword dispatch SHOW_ERROR when networkError 1`] = `
Array [
  Object {
    "type": "auth/forgotPassword/SUBMIT",
  },
  Object {
    "payload": Object {
      "errorTypes": Array [
        Object {
          "errorType": "networkError",
        },
      ],
    },
    "type": "auth/forgotPassword/SHOW_ERROR",
  },
]
`;

exports[`forgotPassword resetPassword dispatch SHOW_ERROR when serverError 1`] = `
Array [
  Object {
    "type": "auth/forgotPassword/SUBMIT",
  },
  Object {
    "payload": Object {
      "errorTypes": Array [
        Object {
          "errorType": "serverError",
        },
      ],
    },
    "type": "auth/forgotPassword/SHOW_ERROR",
  },
]
`;

exports[`forgotPassword resetPassword dispatch SHOW_ERROR when user not exist 1`] = `
Array [
  Object {
    "type": "auth/forgotPassword/SUBMIT",
  },
  Object {
    "payload": Object {
      "errorTypes": Array [
        Object {
          "errorType": "userNotExist",
        },
      ],
    },
    "type": "auth/forgotPassword/SHOW_ERROR",
  },
]
`;

exports[`forgotPassword resetPassword dispatch SHOW_ERROR when wrongVcode 1`] = `
Array [
  Object {
    "type": "auth/forgotPassword/SUBMIT",
  },
  Object {
    "payload": Object {
      "errorTypes": Array [
        Object {
          "errorType": "wrongVcode",
        },
      ],
    },
    "type": "auth/forgotPassword/SHOW_ERROR",
  },
]
`;

exports[`forgotPassword resetPassword request JWT from API and set it to storage 1`] = `
Array [
  "666666",
  "18000000000",
  "QWeasdzxc123!!!",
]
`;

exports[`forgotPassword resetPassword request JWT from API and set it to storage 2`] = `
Array [
  "jwt-token",
]
`;

exports[`forgotPassword resetPassword request JWT from API and set it to storage 3`] = `
Array [
  Object {
    "type": "auth/forgotPassword/SUBMIT",
  },
  Object {
    "type": "auth/forgotPassword/SUBMIT_DONE",
  },
  Object {
    "payload": Object {
      "jwt": "jwt-token",
    },
    "type": "auth/token/SET_JWT",
  },
  Object {
    "routeName": "Tab",
    "type": "Navigation/NAVIGATE",
  },
]
`;

exports[`forgotPassword sendSMS dispatch SHOW_ERROR when networkError 1`] = `
Array [
  Object {
    "type": "auth/forgotPassword/SEND_VCODE",
  },
  Object {
    "payload": Object {
      "errorTypes": Array [
        Object {
          "errorType": "networkError",
        },
      ],
    },
    "type": "auth/forgotPassword/SHOW_ERROR",
  },
]
`;

exports[`forgotPassword sendSMS dispatch SHOW_ERROR when serverError 1`] = `
Array [
  Object {
    "type": "auth/forgotPassword/SEND_VCODE",
  },
  Object {
    "payload": Object {
      "errorTypes": Array [
        Object {
          "errorType": "serverError",
        },
      ],
    },
    "type": "auth/forgotPassword/SHOW_ERROR",
  },
]
`;

exports[`forgotPassword sendSMS request IAM API send vcode SMS 1`] = `
Array [
  "18000000000",
]
`;

exports[`forgotPassword sendSMS request IAM API send vcode SMS 2`] = `
Array [
  Object {
    "type": "auth/forgotPassword/SEND_VCODE",
  },
  Object {
    "type": "auth/forgotPassword/SEND_VCODE_DONE",
  },
]
`;
